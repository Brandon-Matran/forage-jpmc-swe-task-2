From 800b24041a5ac5ad1deb21ed57c0ecac68e095f8 Mon Sep 17 00:00:00 2001
From: Brandon Matran <brandon.matran@gmail.com>
Date: Sat, 6 May 2023 17:29:05 -0700
Subject: [PATCH] Created visual graph for stock comparison

---
 .gitignore    |  2 ++
 src/App.tsx   | 29 +++++++++++++++++++------
 src/Graph.tsx | 60 +++++++++++++++++++++++++++++++--------------------
 3 files changed, 61 insertions(+), 30 deletions(-)

diff --git a/.gitignore b/.gitignore
index 4d29575..7b4a031 100755
--- a/.gitignore
+++ b/.gitignore
@@ -21,3 +21,5 @@
 npm-debug.log*
 yarn-debug.log*
 yarn-error.log*
+
+my_venv
diff --git a/src/App.tsx b/src/App.tsx
index 0728518..33ef449 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,18 +31,31 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) {
+      return (<Graph data={this.state.data} />)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        // Update the state by creating a new array of data that consists of
+        // Previous data in the state and the new data from server
+        this.setState({
+          data: serverResponds,
+          showGraph: true,
+        });
+
+      });
+      x++
+      if (x > 1000) {
+        clearInterval(interval);
+      }
+    }, 100);
   }
 
   /**
@@ -59,7 +74,7 @@ class App extends Component<{}, IState> {
             // As part of your task, update the getDataFromServer() function
             // to keep requesting the data every 100ms until the app is closed
             // or the server does not return anymore data.
-            onClick={() => {this.getDataFromServer()}}>
+            onClick={() => { this.getDataFromServer() }}>
             Start Streaming Data
           </button>
           <div className="Graph">
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..2382bab 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -1,21 +1,21 @@
-import React, { Component } from 'react';
-import { Table } from '@finos/perspective';
-import { ServerRespond } from './DataStreamer';
-import './Graph.css';
+import React, { Component } from "react";
+import { Table } from "@finos/perspective";
+import { ServerRespond } from "./DataStreamer";
+import "./Graph.css";
 
 /**
  * Props declaration for <Graph />
  */
 interface IProps {
-  data: ServerRespond[],
+  data: ServerRespond[];
 }
 
 /**
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
-  load: (table: Table) => void,
+interface PerspectiveViewerElement extends HTMLElement {
+  load: (table: Table) => void;
 }
 
 /**
@@ -27,18 +27,30 @@ class Graph extends Component<IProps, {}> {
   table: Table | undefined;
 
   render() {
-    return React.createElement('perspective-viewer');
+    return React.createElement("perspective-viewer");
   }
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
-
+    const elem = (document.getElementsByTagName(
+      "perspective-viewer"
+    )[0] as unknown) as PerspectiveViewerElement;
+    elem.setAttribute("view", "y_line");
+    elem.setAttribute("column-pivots", '["stock"]');
+    elem.setAttribute("row-pivots", '["timestamp"]');
+    elem.setAttribute("columns", '["top_ask_price"]');
+    elem.setAttribute(
+      "aggregates",
+      `{"stock": "distinct_count",
+  "top_ask_price": "avg",
+"top_bid_price": "avg",
+"timestamp": "distinct count"}`
+    );
     const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
-      timestamp: 'date',
+      stock: "string",
+      top_ask_price: "float",
+      top_bid_price: "float",
+      timestamp: "date",
     };
 
     if (window.perspective && window.perspective.worker()) {
@@ -57,15 +69,17 @@ class Graph extends Component<IProps, {}> {
     if (this.table) {
       // As part of the task, you need to fix the way we update the data props to
       // avoid inserting duplicated entries into Perspective table again.
-      this.table.update(this.props.data.map((el: any) => {
-        // Format the data from ServerRespond to the schema
-        return {
-          stock: el.stock,
-          top_ask_price: el.top_ask && el.top_ask.price || 0,
-          top_bid_price: el.top_bid && el.top_bid.price || 0,
-          timestamp: el.timestamp,
-        };
-      }));
+      this.table.update(
+        this.props.data.map((el: any) => {
+          // Format the data from ServerRespond to the schema
+          return {
+            stock: el.stock,
+            top_ask_price: (el.top_ask && el.top_ask.price) || 0,
+            top_bid_price: (el.top_bid && el.top_bid.price) || 0,
+            timestamp: el.timestamp,
+          };
+        })
+      );
     }
   }
 }
-- 
2.40.0.windows.1

